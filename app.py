import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, scrolledtext, filedialog, messagebox
import socket
import threading
from datetime import datetime
import os
import uuid

class FluxPCClient:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("Dark")  # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        ctk.set_default_color_theme("blue")  # –°–∏–Ω—è—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        
        self.root = ctk.CTk()
        self.root.title("FLUX Messenger - PC Version")
        self.root.geometry("800x600")
        self.root.minsize(700, 500)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.server_ip = tk.StringVar(value="127.0.0.1")
        self.server_port = tk.StringVar(value="5555")
        self.username = tk.StringVar(value="User")
        self.connected = False
        self.client_socket = None
        
        self.create_ui()
        self.center_window()
        
    def center_window(self):
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
    def create_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤)
        left_frame = ctk.CTkFrame(main_frame, width=200)
        left_frame.pack(side="left", fill="y", padx=(0, 5))
        left_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–æ–≤
        chats_label = ctk.CTkLabel(left_frame, text="–ß–∞—Ç—ã", font=ctk.CTkFont(size=16, weight="bold"))
        chats_label.pack(pady=10)
        
        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        self.chats_list = tk.Listbox(left_frame, bg="#2b2b2b", fg="white", border=0, 
                                   selectbackground="#1f6aa5", font=("Arial", 11))
        self.chats_list.pack(fill="both", expand=True, padx=5, pady=5)
        self.chats_list.insert(tk.END, "–û–±—â–∏–π —á–∞—Ç")
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (—á–∞—Ç)
        right_frame = ctk.CTkFrame(main_frame)
        right_frame.pack(side="right", fill="both", expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        chat_header = ctk.CTkFrame(right_frame, height=50)
        chat_header.pack(fill="x", padx=5, pady=5)
        chat_header.pack_propagate(False)
        
        self.chat_title = ctk.CTkLabel(chat_header, text="–û–±—â–∏–π —á–∞—Ç", 
                                     font=ctk.CTkFont(size=16, weight="bold"))
        self.chat_title.pack(side="left", padx=10, pady=10)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.status_label = ctk.CTkLabel(chat_header, text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", 
                                       text_color="red", font=ctk.CTkFont(size=12))
        self.status_label.pack(side="right", padx=10, pady=10)
        
        # –û–∫–Ω–æ —á–∞—Ç–∞
        self.chat_display = scrolledtext.ScrolledText(right_frame, wrap=tk.WORD, 
                                                    bg="#1e1e1e", fg="white", 
                                                    font=("Arial", 11), border=0)
        self.chat_display.pack(fill="both", expand=True, padx=5, pady=5)
        self.chat_display.config(state=tk.DISABLED)
        
        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        input_frame = ctk.CTkFrame(right_frame, height=80)
        input_frame.pack(fill="x", padx=5, pady=5)
        input_frame.pack_propagate(False)
        
        self.message_entry = ctk.CTkEntry(input_frame, placeholder_text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                                        font=ctk.CTkFont(size=12))
        self.message_entry.pack(fill="x", padx=10, pady=10)
        self.message_entry.bind("<Return>", self.send_message)
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        button_frame = ctk.CTkFrame(input_frame)
        button_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        self.connect_btn = ctk.CTkButton(button_frame, text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", 
                                       command=self.toggle_connection)
        self.connect_btn.pack(side="left", padx=(0, 5))
        
        self.send_btn = ctk.CTkButton(button_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", 
                                    command=self.send_message)
        self.send_btn.pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
        self.file_btn = ctk.CTkButton(button_frame, text="üìé –§–∞–π–ª", 
                                    width=60, command=self.send_file_dialog)
        self.file_btn.pack(side="left", padx=5)
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ctk.CTkFrame(left_frame, height=150)
        settings_frame.pack(fill="x", side="bottom", pady=5)
        settings_frame.pack_propagate(False)
        
        ctk.CTkLabel(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", 
                    font=ctk.CTkFont(weight="bold")).pack(pady=5)
        
        # –ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ctk.CTkLabel(settings_frame, text="–ò–º—è:").pack(anchor="w", padx=5)
        username_entry = ctk.CTkEntry(settings_frame, textvariable=self.username)
        username_entry.pack(fill="x", padx=5, pady=2)
        
        # –ü–æ–ª–µ IP —Å–µ—Ä–≤–µ—Ä–∞
        ctk.CTkLabel(settings_frame, text="IP —Å–µ—Ä–≤–µ—Ä–∞:").pack(anchor="w", padx=5)
        ip_entry = ctk.CTkEntry(settings_frame, textvariable=self.server_ip)
        ip_entry.pack(fill="x", padx=5, pady=2)
        
        # –ü–æ–ª–µ –ø–æ—Ä—Ç–∞
        ctk.CTkLabel(settings_frame, text="–ü–æ—Ä—Ç:").pack(anchor="w", padx=5)
        port_entry = ctk.CTkEntry(settings_frame, textvariable=self.server_port)
        port_entry.pack(fill="x", padx=5, pady=2)
        
    def send_file_dialog(self):
        """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        if not self.connected:
            self.add_message("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É!")
            return
            
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
            filetypes=[("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if file_path:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self.send_file, args=(file_path,), daemon=True).start()
            
    def send_file(self, file_path):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            file_name = os.path.basename(file_path)
            file_size = os.path.getsize(file_path)
            file_id = str(uuid.uuid4())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å. 10 –ú–ë)
            if file_size > 10 * 1024 * 1024:
                self.add_message("–û—à–∏–±–∫–∞", "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10 –ú–ë)")
                return
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
            file_metadata = {
                "type": "file_metadata",
                "file_id": file_id,
                "file_name": file_name,
                "file_size": file_size,
                "username": self.username.get()
            }
            self.send_json(file_metadata)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º —Ñ–∞–π–ª
            with open(file_path, 'rb') as file:
                while True:
                    chunk = file.read(4096)
                    if not chunk:
                        break
                    self.client_socket.send(chunk)
                    
            self.add_message("–°–∏—Å—Ç–µ–º–∞", f"–§–∞–π–ª {file_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            self.add_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            
    def download_file(self, file_id, file_name):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            request_data = {
                "type": "file_request",
                "file_id": file_id,
                "file_name": file_name
            }
            self.send_json(request_data)
            
            # –§–∞–π–ª –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –≤ receive_messages
            self.add_message("–°–∏—Å—Ç–µ–º–∞", f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {file_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            self.add_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–π–ª–∞: {str(e)}")
            
    def save_downloaded_file(self, file_data, file_name):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            downloads_dir = "downloads"
            if not os.path.exists(downloads_dir):
                os.makedirs(downloads_dir)
                
            file_path = filedialog.asksaveasfilename(
                initialdir=downloads_dir,
                initialfile=file_name,
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫"
            )
            
            if file_path:
                with open(file_path, 'wb') as file:
                    file.write(file_data)
                self.add_message("–°–∏—Å—Ç–µ–º–∞", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                
        except Exception as e:
            self.add_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            
    def toggle_connection(self):
        if not self.connected:
            self.connect_to_server()
        else:
            self.disconnect_from_server()
            
    def connect_to_server(self):
        try:
            self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client_socket.connect((self.server_ip.get(), int(self.server_port.get())))
            self.connected = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            join_data = {
                "type": "join",
                "username": self.username.get()
            }
            self.send_json(join_data)
            
            self.status_label.configure(text="–ü–æ–¥–∫–ª—é—á–µ–Ω–æ", text_color="green")
            self.connect_btn.configure(text="–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            receive_thread = threading.Thread(target=self.receive_messages, daemon=True)
            receive_thread.start()
            
            self.add_message("–°–∏—Å—Ç–µ–º–∞", "–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É!")
            
        except Exception as e:
            self.add_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {str(e)}")
            
    def disconnect_from_server(self):
        if self.client_socket:
            try:
                self.client_socket.close()
            except:
                pass
                
        self.connected = False
        self.status_label.configure(text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", text_color="red")
        self.connect_btn.configure(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        self.add_message("–°–∏—Å—Ç–µ–º–∞", "–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        
    def send_message(self, event=None):
        if not self.connected:
            self.add_message("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É!")
            return
            
        message = self.message_entry.get().strip()
        if message:
            try:
                message_data = {
                    "type": "message",
                    "username": self.username.get(),
                    "message": message
                }
                self.send_json(message_data)
                self.add_message("–í—ã", message)
                self.message_entry.delete(0, tk.END)
            except Exception as e:
                self.add_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
                
    def send_json(self, data):
        import json
        json_data = json.dumps(data).encode('utf-8')
        header = f"{len(json_data):<1024}".encode('utf-8')
        self.client_socket.send(header + json_data)
        
    def receive_messages(self):
        file_transfer_mode = False
        current_file_data = b""
        current_file_size = 0
        current_file_name = ""
        current_file_id = ""
        
        while self.connected:
            try:
                if file_transfer_mode:
                    # –†–µ–∂–∏–º –ø—Ä–∏–µ–º–∞ —Ñ–∞–π–ª–∞
                    chunk = self.client_socket.recv(4096)
                    if not chunk:
                        break
                        
                    current_file_data += chunk
                    
                    if len(current_file_data) >= current_file_size:
                        # –§–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–ª—É—á–µ–Ω
                        self.root.after(0, lambda: self.save_downloaded_file(current_file_data, current_file_name))
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–∞
                        file_transfer_mode = False
                        current_file_data = b""
                        current_file_size = 0
                        current_file_name = ""
                        current_file_id = ""
                        
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                header = self.client_socket.recv(1024).decode('utf-8')
                if not header:
                    break
                    
                data_length = int(header.strip())
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = b""
                while len(data) < data_length:
                    chunk = self.client_socket.recv(min(4096, data_length - len(data)))
                    if not chunk:
                        break
                    data += chunk
                    
                if data:
                    import json
                    message_data = json.loads(data.decode('utf-8'))
                    
                    message_type = message_data.get("type")
                    
                    if message_type == "message":
                        username = message_data.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                        message = message_data.get("message", "")
                        self.add_message(username, message)
                        
                    elif message_type == "system":
                        message = message_data.get("message", "")
                        self.add_message("–°–∏—Å—Ç–µ–º–∞", message)
                        
                    elif message_type == "file_announce":
                        username = message_data.get("username", "")
                        file_name = message_data.get("file_name", "")
                        file_size = message_data.get("file_size", 0)
                        file_id = message_data.get("file_id", "")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
                        size_mb = file_size / (1024 * 1024)
                        self.add_message("–°–∏—Å—Ç–µ–º–∞", 
                                       f"{username} –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª: {file_name} ({size_mb:.2f} MB)")
                                       
                    elif message_type == "file_ready":
                        username = message_data.get("username", "")
                        file_name = message_data.get("file_name", "")
                        file_id = message_data.get("file_id", "")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        self.add_file_message(username, file_name, file_id)
                        
                    elif message_type == "file_transfer":
                        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–µ–º —Ñ–∞–π–ª–∞
                        file_transfer_mode = True
                        current_file_name = message_data.get("file_name", "")
                        current_file_size = message_data.get("file_size", 0)
                        current_file_id = message_data.get("file_id", "")
                        current_file_data = b""
                        
                        self.add_message("–°–∏—Å—Ç–µ–º–∞", f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {current_file_name}")
                        
            except:
                if self.connected:
                    self.root.after(0, self.disconnect_from_server)
                break
                
    def add_message(self, username, message):
        timestamp = datetime.now().strftime("%H:%M")
        formatted_message = f"[{timestamp}] {username}: {message}\n"
        
        self.chat_display.config(state=tk.NORMAL)
        self.chat_display.insert(tk.END, formatted_message)
        self.chat_display.config(state=tk.DISABLED)
        self.chat_display.see(tk.END)
        
    def add_file_message(self, username, file_name, file_id):
        timestamp = datetime.now().strftime("%H:%M")
        formatted_message = f"[{timestamp}] {username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª: {file_name}\n"
        
        self.chat_display.config(state=tk.NORMAL)
        self.chat_display.insert(tk.END, formatted_message)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        button_frame = ctk.CTkFrame(self.chat_display)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_btn = ctk.CTkButton(button_frame, text="üì• –°–∫–∞—á–∞—Ç—å", 
                                    command=lambda fid=file_id, fn=file_name: self.download_file(fid, fn))
        download_btn.pack(padx=5, pady=2)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.chat_display.window_create(tk.END, window=button_frame)
        self.chat_display.insert(tk.END, "\n")
        self.chat_display.config(state=tk.DISABLED)
        self.chat_display.see(tk.END)
        
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = FluxPCClient()
    app.run()